@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Netduino P1 logging Dashboard</title>
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/Scripts/knockout-2.1.0.js")    
    @Scripts.Render("~/Content/highcharts/highcharts.js")
    @Scripts.Render("~/Scripts/moment-1.7.2.js")
    @Styles.Render("~/Content/css")
</head>
<body>
    @Html.Hidden("apikey", ViewData["ApiKey"])
    @Html.Hidden("currentWeek", ViewData["CurrentWeek"])
    
    <script type="text/html" id="usage-template">
        <table>
                <thead>
                    <tr>
                        <td rowspan="2" data-bind="text: identifierName"></td>
                        <td colspan="4">Electricity</td>
                        <td colspan="4">Gas</td>
                    </tr>
                    <tr>                        
                        <td>Usage</td>
                        <td>Reference</td>
                        <td>Difference</td>
                        <td></td>
                        <td>Usage</td>
                        <td>Reference</td>
                        <td>Difference</td>
                        <td></td>
                    </tr>
                </thead>
                <tbody data-bind="foreach: usages">
                    <tr>
                        <td><span data-bind="text: identifier"></span></td>
                        <td><span data-bind="text: eTotal"></span></td>
                        <td><span data-bind="text: eReference"></span></td>
                        <td data-bind="style: { color: eDifference() < 0 ? 'green' : 'red' }"><span data-bind="text: eDifference"></span></td>
                        <td data-bind="style: { color: eDifference() < 0 ? 'green' : 'red' }">(<span data-bind="text: ePercentage"></span>%)</td>
                        <td><span data-bind="text: gas"></span></td>
                        <td><span data-bind="text: gasReference"></span></td>
                        <td data-bind="style: { color: gasDifference() < 0 ? 'green' : 'red' }"><span data-bind="text: gasDifference"></span></td>
                        <td data-bind="style: { color: gasDifference() < 0 ? 'green' : 'red' }">(<span data-bind="text: gasPercentage"></span>%)</td>
                    </tr>
                </tbody>
            </table>
    </script>
    
    <div id="hourly" style="display:block; clear: both;">
        <strong>Per hour (<span data-bind="text: hourlyDate"></span>)</strong>
        <div id="hourlychart"></div>
        <div id="hourlytable" data-bind="with: hourlyUsage" style="display:block; width: 100%; clear: both;">
            <table style="float: left;">
                <thead>
                    <tr>
                        <td>Hour</td>
                        <td>Electricity</td>
                        <td>Gas</td>
                    </tr>
                </thead>
                <tbody data-bind="foreach: firstUsages">
                    <tr>
                        <td><span data-bind="text: hour"></span></td>
                        <td><span data-bind="text: eTotal"></span></td>
                        <td><span data-bind="text: gas"></span></td>
                    </tr>
                </tbody>
            </table>

            <table style="float: left;">
                <thead>
                    <tr>
                        <td>Hour</td>
                        <td>Electricity</td>
                        <td>Gas</td>
                    </tr>
                </thead>
                <tbody data-bind="foreach: secondUsages">
                    <tr>
                        <td><span data-bind="text: hour"></span></td>
                        <td><span data-bind="text: eTotal"></span></td>
                        <td><span data-bind="text: gas"></span></td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div  style="display:block; width: 100%; clear: both;">
            <input type="button" onclick="dashboardViewModel.hourlyPrevious();" value="Previous day" />
            <input type="button" onclick="dashboardViewModel.hourlyNext();" value="Next day" />
        </div>
    </div>
    <div id="daily" style="display:block; clear: both;">
        <strong>Per day (week <span data-bind="text: dailyWeek"></span>)</strong>
        <div id="dailychart"></div>
        <div id="dailytable" data-bind="template: { name: 'usage-template', data: dailyUsage }"></div>
        <input type="button" onclick="dashboardViewModel.dailyPrevious();" value="Previous week" />
        <input type="button" onclick="dashboardViewModel.dailyNext();" value="Next week" />
    </div>
    <div id="weeky" style="display:block; clear: both;">
        <strong>Per week (<span data-bind="text: weeklyRange"></span>)</strong>
        <div id="weeklychart"></div>
        <div id="weeklytable" data-bind="template: { name: 'usage-template', data: weeklyUsage }"></div>
        <input type="button" onclick="dashboardViewModel.weeklyPrevious();" value="Previous" />
        <input type="button" onclick="dashboardViewModel.weeklyNext();" value="Next" />
    </div>
    <div id="monthly" style="display:block; clear: both;">
        <strong>Per month (<span data-bind="text: monthlyYear"></span>)</strong>
        <div id="monthlychart"></div>
        <div id="monthlytable" data-bind="template: { name: 'usage-template', data: monthlyUsage }"></div>
        
        <input type="button" onclick="dashboardViewModel.monthlyPrevious();" value="Previous year" />
        <input type="button" onclick="dashboardViewModel.monthlyNext();" value="Next year" />
    </div>

    <script type="text/javascript">
        function HourlyUsage(usages) {
            var self = this;

            self.firstUsages = ko.observableArray(usages.splice(0, (usages.length / 2) + (usages.length % 2)));
            self.secondUsages = ko.observableArray(usages);

            self.setUsages = function (usages) {
                self.firstUsages(usages.splice(0, (usages.length / 2) + (usages.length % 2)));
                self.secondUsages(usages);
            };
        }

        function HourlyUsageLine(hour, eTotal, gas) {
            var self = this;
            
            self.hour = ko.observable(hour);
            self.eTotal = ko.observable(eTotal);
            self.gas = ko.observable(gas);
        }

        function Usage(identifierName, usages) {
            var self = this;
            self.identifierName = ko.observable(identifierName);
            self.usages = ko.observableArray(usages);
        }

        function UsageLine(identifier, eTotal, eReference, eDifference, ePercentage, gas, gasReference, gasDifference, gasPercentage) {
            var self = this;

            self.identifier = ko.observable(identifier);
            self.eTotal = ko.observable(eTotal);
            self.eReference = ko.observable(eReference);
            self.eDifference = ko.observable(eDifference);
            self.ePercentage = ko.observable(ePercentage);
            self.gas = ko.observable(gas);
            self.gasReference = ko.observable(gasReference);
            self.gasDifference = ko.observable(gasDifference);
            self.gasPercentage = ko.observable(gasPercentage);
        }

        function DashboardViewModel(apiKey, currentWeek) {
            var self = this;
            self.apiKey = ko.observable(apiKey);
            self.currentWeek = ko.observable(currentWeek);
            self.hourlyOffset = ko.observable(0);
            self.dailyOffset = ko.observable(0);
            self.weeklyOffset = ko.observable(0);
            self.weeklyStep = ko.observable(5);
            self.monthlyOffset = ko.observable(0);

            self.hourlyDate = ko.computed(function () {
                return moment().subtract('days', self.hourlyOffset()).format('ddd D MMM YYYY');
            });
            self.dailyWeek = ko.computed(function () {
                return self.currentWeek() - self.dailyOffset();
            });
            self.weeklyRange = ko.computed(function () {
                var endDate = moment().day(7).subtract('days', 7 * self.weeklyOffset());
                var startDate = moment(endDate).add('days', 1).subtract('days', 7 * self.weeklyStep());
                return startDate.format('ddd D MMM YYYY') + " - " + endDate.format('ddd D MMM YYYY');
            });            
            self.monthlyYear = ko.computed(function () {
                var d = new Date();
                return d.getFullYear() - self.monthlyOffset();
            });

            self.hourlyUsage = ko.observable(new HourlyUsage([new HourlyUsageLine(0, 0, 0), new HourlyUsageLine(0, 0, 0)]));
            self.dailyUsage = ko.observable(new Usage('Day', [new UsageLine('', 0, 0, 0, 0, 0, 0, 0, 0)]));
            self.weeklyUsage = ko.observable(new Usage('Week', [new UsageLine('', 0, 0, 0, 0, 0, 0, 0, 0)]));
            self.monthlyUsage = ko.observable(new Usage('Month', [new UsageLine('', 0, 0, 0, 0, 0, 0, 0, 0)]));

            self.hourlyUrl = ko.computed(function () {
                return "/api/usages/" + self.apiKey() + "/hourly/" + self.hourlyOffset();
            });
            self.dailyUrl = ko.computed(function () {
                return "/api/usages/" + self.apiKey() + "/daily/" + self.dailyOffset();
            });
            self.weeklyUrl = ko.computed(function () {
                return "/api/usages/" + self.apiKey() + "/weekly/" + self.weeklyOffset() + "/" + self.weeklyStep();
            });
            self.monthlyUrl = ko.computed(function () {
                return "/api/usages/" + self.apiKey() + "/monthly/" + self.monthlyOffset();
            });

            self.hourlyNext = function () {
                if (this.hourlyOffset() == 0)
                    return;

                this.hourlyOffset(this.hourlyOffset() - 1);
            };
            self.hourlyPrevious = function () {
                this.hourlyOffset(this.hourlyOffset() + 1);
            };
            self.dailyNext = function () {
                if (this.dailyOffset() == 0)
                    return;

                this.dailyOffset(this.dailyOffset() - 1);
            };
            self.dailyPrevious = function () {
                this.dailyOffset(this.dailyOffset() + 1);
            };
            self.weeklyNext = function () {
                if (this.weeklyOffset() == 0)
                    return;

                this.weeklyOffset(this.weeklyOffset() - 1);
            };
            self.weeklyPrevious = function () {
                this.weeklyOffset(this.weeklyOffset() + 1);
            };
            self.monthlyNext = function () {
                if (this.monthlyOffset() == 0)
                    return;

                this.monthlyOffset(this.monthlyOffset() - 1);
            };
            self.monthlyPrevious = function () {
                this.monthlyOffset(this.monthlyOffset() + 1);
            };
        }

        var dashboardViewModel = {};

        function loadHourlyData() {
            $.getJSON(dashboardViewModel.hourlyUrl(), function (data) {
                var hourly = [];
                $.each(data, function (index, value) {
                    hourly.push(new HourlyUsageLine(value.Hour, value.ETotal, value.Gas));
                });

                dashboardViewModel.hourlyUsage().setUsages(hourly);
            });
        }

        function loadDailyData() {
            $.getJSON(dashboardViewModel.dailyUrl(), function (data) {
                var daily = [];
                $.each(data, function (index, value) {
                    daily.push(new UsageLine(value.DayString, value.ETotal, value.EleRef, value.EleRefDiff, value.EleRefPerc, value.Gas, value.GasRef, value.GasRefDiff, value.GasRefPerc));
                });

                dashboardViewModel.dailyUsage().usages(daily);
            });
        }
        
        function loadWeeklyData() {
            $.getJSON(dashboardViewModel.weeklyUrl(), function (data) {
                var weekly = [];
                $.each(data, function (index, value) {
                    weekly.push(new UsageLine(value.Week, value.ETotal, value.EleRef, value.EleRefDiff, value.EleRefPerc, value.Gas, value.GasRef, value.GasRefDiff, value.GasRefPerc));
                });

                dashboardViewModel.weeklyUsage().usages(weekly);
            });
        }

        function loadMonthlyData() {
            $.getJSON(dashboardViewModel.monthlyUrl(), function (data) {
                var monthly = [];
                $.each(data, function (index, value) {
                    monthly.push(new UsageLine(value.Month, value.ETotal, value.EleRef, value.EleRefDiff, value.EleRefPerc, value.Gas, value.GasRef, value.GasRefDiff, value.GasRefPerc));
                });

                dashboardViewModel.monthlyUsage().usages(monthly);
            });
        }

        $(document).ready(function () {
            dashboardViewModel = new DashboardViewModel($("input[name='apikey']").val(), $("input[name='currentWeek']").val());

            dashboardViewModel.hourlyUrl.subscribe(function (newValue) {
                loadHourlyData();
            });
            dashboardViewModel.dailyUrl.subscribe(function (newValue) {
                loadDailyData();
            });
            dashboardViewModel.weeklyUrl.subscribe(function (newValue) {
                loadWeeklyData();
            });
            dashboardViewModel.monthlyUrl.subscribe(function (newValue) {
                loadMonthlyData();
            });

            loadHourlyData();
            loadDailyData();
            loadWeeklyData();
            loadMonthlyData();

            ko.applyBindings(dashboardViewModel);
        });
    </script>
</body>
</html>
