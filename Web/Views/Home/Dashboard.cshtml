@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Netduino P1 logging Dashboard</title>
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/Scripts/knockout-2.1.0.js")    
    @Scripts.Render("~/scripts/highcharts/highcharts.js")
    @Scripts.Render("~/Scripts/moment-1.7.2.js")
    @Styles.Render("~/Content/themes/netduino/netduino.min.css")
    <link rel="stylesheet" href="http://code.jquery.com/mobile/1.2.0/jquery.mobile.structure-1.2.0.min.css" />
    @Styles.Render("~/Content/Dashboard.css")
    <script src="http://code.jquery.com/mobile/1.2.0/jquery.mobile-1.2.0.min.js"></script>
</head>
<body>
    @Html.Hidden("apikey", ViewData["ApiKey"])
    @Html.Hidden("currentWeek", ViewData["CurrentWeek"])
    
    <script type="text/html" id="usage-template">
        <table>
            <thead>
                <tr class="top">
                    <th class="first"></th>
                    <th colspan="4" class="border">Electricity (kWh)</th>
                    <th></th>
                    <th colspan="4" class="border">Gas (m<sup>3</sup>)</th>
                </tr>
                <tr class="bottom">                        
                    <th class="first" data-bind="text: identifierName"></th>
                    <th>Usage</th>
                    <th>Reference</th>
                    <th colspan="2">Difference</th>                    
                    <th></th>
                    <th>Usage</th>
                    <th>Reference</th>
                    <th colspan="2">Difference</th>                    
                </tr>
            </thead>
            <tbody data-bind="foreach: usages">
                <tr data-bind="style: { backgroundColor: $index() % 2 === 0 ? '#fff' : '#e9e9e9' }">
                    <td class="first" width="50px"><span data-bind="text: identifier"></span></td>
                    <td class="number" width="50px"><span data-bind="text: eTotal().toFixed(3)"></span></td>
                    <td class="number" width="50px"><span data-bind="text: eReference().toFixed(3)"></span></td>
                    <td class="number" width="50px" data-bind="style: { color: eDifference() < 0 ? 'green' : 'red' }"><span data-bind="text: eDifference().toFixed(3)"></span></td>
                    <td class="number" width="40px" data-bind="style: { color: eDifference() < 0 ? 'green' : 'red' }">(<span data-bind="text: ePercentage"></span>%)</td>
                    <td></td>
                    <td class="number" width="50px"><span data-bind="text: gas().toFixed(3)"></span></td>
                    <td class="number" width="50px"><span data-bind="text: gasReference().toFixed(3)"></span></td>
                    <td class="number" width="50px" data-bind="style: { color: gasDifference() < 0 ? 'green' : 'red' }"><span data-bind="text: gasDifference().toFixed(3)"></span></td>
                    <td class="number" width="40px" data-bind="style: { color: gasDifference() < 0 ? 'green' : 'red' }">(<span data-bind="text: gasPercentage"></span>%)</td>
                </tr>
            </tbody>
        </table>
    </script>
    
    <div data-role="page" id="hourly" data-theme="b">
        <div data-role="header"  data-theme="b" data-id="hea1" data-position="fixed">
            <a href="#" data-icon="arrow-l" data-theme="b" onclick="dashboardViewModel.hourlyPrevious();">Previous day</a>
            <h1>Per hour (<span data-bind="text: hourlyDate"></span>)</h1>
            <div data-type="horizontal" data-role="controlgroup" class="ui-btn-right">  
                <a href="#" data-role="button" data-icon="home" data-theme="b" data-iconpos="right" onclick="dashboardViewModel.hourlyOffset(0);" data-bind="visible: hourlyOffset() > 0">Current day</a>    
                <a href="#" data-role="button" data-icon="arrow-r" data-theme="b" data-iconpos="right" onclick="dashboardViewModel.hourlyNext();" data-bind="visible: hourlyOffset() > 0">Next day</a>
            </div>
        </div>
        <div data-role="content" data-theme="b">
            <div id="hourlychart" style="width: 50%; float: left"></div>
            <div id="hourlytable" style="width: 50%; float: left" data-bind="with: hourlyUsage">
                <table style="float: left;">
                    <thead>
                        <tr class="bottom"> 
                            <th class="first">Hour</th>
                            <th>Electricity<br />(kWh)</th>
                            <th>Gas<br />(m<sup>3</sup>)</th>
                        </tr>
                    </thead>
                    <tbody data-bind="foreach: firstUsages">
                        <tr data-bind="style: { backgroundColor: $index() % 2 === 0 ? '#fff' : '#e9e9e9' }">
                            <td class="first"><span data-bind="text: hour"></span></td>
                            <td class="number"><span data-bind="text: eTotal().toFixed(3)"></span></td>
                            <td class="number"><span data-bind="text: gas().toFixed(3)"></span></td>
                        </tr>
                    </tbody>
                </table>

                <table style="float: left;">
                    <thead>
                        <tr class="bottom"> 
                            <th class="first">Hour</th>
                            <th>Electricity<br />(kWh)</th>
                            <th>Gas<br />(m<sup>3</sup>)</th>
                        </tr>
                    </thead>
                    <tbody data-bind="foreach: secondUsages">
                        <tr data-bind="style: { backgroundColor: $index() % 2 === 0 ? '#fff' : '#e9e9e9' }">
                            <td class="first"><span data-bind="text: hour"></span></td>
                            <td class="number"><span data-bind="text: eTotal().toFixed(3)"></span></td>
                            <td class="number"><span data-bind="text: gas().toFixed(3)"></span></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        <div data-role="footer" data-id="foo1" data-position="fixed" data-theme="b">
            <div data-role="navbar">
                <ul>
                    <li><a data-transition="slidedown" href="#hourly" class="ui-btn-active ui-state-persist">Per hour</a></li>
                    <li><a data-transition="slidedown" href="#daily">Per day</a></li>
                    <li><a data-transition="slidedown" href="#weekly">Per week</a></li>
                    <li><a data-transition="slidedown" href="#monthly">Per month</a></li>
                </ul>
	        </div>
        </div>
    </div>
    <div data-role="page" id="daily" data-theme="b">
        <div data-role="header" data-theme="b" data-id="hea1" data-position="fixed">
            <a href="#" data-icon="arrow-l" data-theme="b" onclick="dashboardViewModel.dailyPrevious();">Previous week</a>
            <h1>Per day (week <span data-bind="text: dailyWeek"></span>)</h1>
            <div data-type="horizontal" data-role="controlgroup" class="ui-btn-right">
                <a href="#" data-role="button" data-icon="home" data-theme="b" data-iconpos="right" onclick="dashboardViewModel.dailyOffset(0);" data-bind="visible: dailyOffset() > 0">Current week</a>
                <a href="#" data-role="button" data-icon="arrow-r" data-theme="b" data-iconpos="right" onclick="dashboardViewModel.dailyNext();" data-bind="visible: dailyOffset() > 0">Next week</a>
            </div>
        </div>
        <div data-role="content">
            <div id="dailychart" style="width: 50%; float: left"></div>
            <div id="dailytable" style="width: 50%; float: left" data-bind="template: { name: 'usage-template', data: dailyUsage }"></div>
        </div>
        <div data-role="footer" data-theme="b" data-id="foo1" data-position="fixed">
            <div data-role="navbar">
                <ul>
                    <li><a data-transition="slidedown" href="#hourly">Per hour</a></li>
                    <li><a data-transition="slidedown" href="#daily" class="ui-btn-active ui-state-persist">Per day</a></li>
                    <li><a data-transition="slidedown" href="#weekly">Per week</a></li>
                    <li><a data-transition="slidedown" href="#monthly">Per month</a></li>
                </ul>
	        </div>
        </div>
    </div>
    <div data-role="page" id="weekly" data-theme="b">
        <div data-role="header" data-id="hea1" data-theme="b" data-position="fixed">
            <a href="#" data-icon="arrow-l" data-theme="b" onclick="dashboardViewModel.weeklyPrevious();">Previous period</a>
            <h1>Per week (<span data-bind="text: weeklyRange"></span>)</h1>
            <div data-type="horizontal" data-role="controlgroup" class="ui-btn-right">
                <a href="#" data-role="button" data-icon="home" data-theme="b" data-iconpos="right" onclick="dashboardViewModel.weeklyOffset(0);" data-bind="visible: weeklyOffset() > 0">Current period</a>
                <a href="#" data-role="button" data-icon="arrow-r" data-theme="b" data-iconpos="right" onclick="dashboardViewModel.weeklyNext();" data-bind="visible: weeklyOffset() > 0">Next period</a>
            </div>
        </div>
        <div data-role="content">
            <div id="weeklychart" style="width: 50%; float: left"></div>
            <div id="weeklytable" style="width: 50%; float: left" data-bind="template: { name: 'usage-template', data: weeklyUsage }"></div>
        </div>
        <div data-role="footer" data-id="foo1" data-theme="b" data-position="fixed">
            <div data-role="navbar">
                <ul>
                    <li><a data-transition="slidedown" href="#hourly">Per hour</a></li>
                    <li><a data-transition="slidedown" href="#daily">Per day</a></li>
                    <li><a data-transition="slidedown" href="#weekly" class="ui-btn-active ui-state-persist">Per week</a></li>
                    <li><a data-transition="slidedown" href="#monthly">Per month</a></li>
                </ul>
	        </div>
        </div>
    </div>
    <div data-role="page" id="monthly" data-theme="b">
        <div data-role="header" data-id="hea1" data-theme="b" data-position="fixed">
            <a href="#" data-icon="arrow-l" data-theme="b" onclick="dashboardViewModel.monthlyPrevious();">Previous year</a>
            <h1>Per month (<span data-bind="text: monthlyYear"></span>)</h1>
            <div data-type="horizontal" data-role="controlgroup" class="ui-btn-right">
                <a href="#" data-role="button" data-icon="home" data-theme="b" data-iconpos="right" onclick="dashboardViewModel.monthlyOffset(0);" data-bind="visible: monthlyOffset() > 0">Current year</a>
                <a href="#" data-role="button" data-icon="arrow-r" data-theme="b" data-iconpos="right" onclick="dashboardViewModel.monthlyNext();" data-bind="visible: monthlyOffset() > 0">Next year</a>
            </div>
        </div>
        <div data-role="content">
            <div id="monthlychart" style="width: 50%; float: left"></div>
            <div id="monthlytable" style="width: 50%; float: left" data-bind="template: { name: 'usage-template', data: monthlyUsage }"></div>
        </div>
        <div data-role="footer" data-id="foo1" data-theme="b" data-position="fixed">
            <div data-role="navbar">
                <ul>
                    <li><a data-transition="slidedown" href="#hourly">Per hour</a></li>
                    <li><a data-transition="slidedown" href="#daily">Per day</a></li>
                    <li><a data-transition="slidedown" href="#weekly">Per week</a></li>
                    <li><a data-transition="slidedown" href="#monthly" class="ui-btn-active ui-state-persist">Per month</a></li>
                </ul>
	        </div>
        </div>
    </div>

    <script type="text/javascript">
        function HourlyUsage(usages) {
            var self = this;

            self.firstUsages = ko.observableArray(usages.splice(0, (usages.length / 2) + (usages.length % 2)));
            self.secondUsages = ko.observableArray(usages);

            self.setUsages = function (usageLines) {
                self.firstUsages(usageLines.splice(0, (usageLines.length / 2) + (usageLines.length % 2)));
                self.secondUsages(usageLines);
            };
        }

        function HourlyUsageLine(hour, eTotal, gas) {
            var self = this;
            
            self.hour = ko.observable(hour);
            self.eTotal = ko.observable(eTotal);
            self.gas = ko.observable(gas);
        }

        function Usage(identifierName, usages) {
            var self = this;
            self.identifierName = ko.observable(identifierName);
            self.usages = ko.observableArray(usages);
        }

        function UsageLine(identifier, eTotal, eReference, eDifference, ePercentage, gas, gasReference, gasDifference, gasPercentage) {
            var self = this;

            self.identifier = ko.observable(identifier);
            self.eTotal = ko.observable(eTotal);
            self.eReference = ko.observable(eReference);
            self.eDifference = ko.observable(eDifference);
            self.ePercentage = ko.observable(ePercentage);
            self.gas = ko.observable(gas);
            self.gasReference = ko.observable(gasReference);
            self.gasDifference = ko.observable(gasDifference);
            self.gasPercentage = ko.observable(gasPercentage);
        }

        function DashboardViewModel(apiKey, currentWeek) {
            var self = this;
            self.apiKey = ko.observable(apiKey);
            self.currentWeek = ko.observable(currentWeek);
            self.hourlyOffset = ko.observable(0);
            self.dailyOffset = ko.observable(0);
            self.weeklyOffset = ko.observable(0);
            self.weeklyStep = ko.observable(5);
            self.monthlyOffset = ko.observable(0);

            self.hourlyDate = ko.computed(function () {
                return moment().subtract('days', self.hourlyOffset()).format('ddd D MMM YYYY');
            });
            self.dailyWeek = ko.computed(function () {
                return self.currentWeek() - self.dailyOffset();
            });
            self.weeklyRange = ko.computed(function () {
                var endDate = moment().day(7).subtract('days', 7 * self.weeklyOffset());
                var startDate = moment(endDate).add('days', 1).subtract('days', 7 * self.weeklyStep());
                return startDate.format('ddd D MMM YYYY') + " - " + endDate.format('ddd D MMM YYYY');
            });            
            self.monthlyYear = ko.computed(function () {
                var d = new Date();
                return d.getFullYear() - self.monthlyOffset();
            });

            self.hourlyUsage = ko.observable(new HourlyUsage([new HourlyUsageLine(0, 0, 0), new HourlyUsageLine(0, 0, 0)]));
            self.dailyUsage = ko.observable(new Usage('Day', [new UsageLine('', 0, 0, 0, 0, 0, 0, 0, 0)]));
            self.weeklyUsage = ko.observable(new Usage('Week', [new UsageLine('', 0, 0, 0, 0, 0, 0, 0, 0)]));
            self.monthlyUsage = ko.observable(new Usage('Month', [new UsageLine('', 0, 0, 0, 0, 0, 0, 0, 0)]));

            self.hourlyUrl = ko.computed(function () {
                return "/api/usages/" + self.apiKey() + "/hourly/" + self.hourlyOffset();
            });
            self.dailyUrl = ko.computed(function () {
                return "/api/usages/" + self.apiKey() + "/daily/" + self.dailyOffset();
            });
            self.weeklyUrl = ko.computed(function () {
                return "/api/usages/" + self.apiKey() + "/weekly/" + self.weeklyOffset() + "/" + self.weeklyStep();
            });
            self.monthlyUrl = ko.computed(function () {
                return "/api/usages/" + self.apiKey() + "/monthly/" + self.monthlyOffset();
            });

            self.hourlyNext = function () {
                if (this.hourlyOffset() == 0)
                    return;

                this.hourlyOffset(this.hourlyOffset() - 1);
            };
            self.hourlyPrevious = function () {
                this.hourlyOffset(this.hourlyOffset() + 1);
            };
            self.dailyNext = function () {
                if (this.dailyOffset() == 0)
                    return;

                this.dailyOffset(this.dailyOffset() - 1);
            };
            self.dailyPrevious = function () {
                this.dailyOffset(this.dailyOffset() + 1);
            };
            self.weeklyNext = function () {
                if (this.weeklyOffset() == 0)
                    return;

                this.weeklyOffset(this.weeklyOffset() - 1);
            };
            self.weeklyPrevious = function () {
                this.weeklyOffset(this.weeklyOffset() + 1);
            };
            self.monthlyNext = function () {
                if (this.monthlyOffset() == 0)
                    return;

                this.monthlyOffset(this.monthlyOffset() - 1);
            };
            self.monthlyPrevious = function () {
                this.monthlyOffset(this.monthlyOffset() + 1);
            };
        }

        function loadHourlyData() {
            $.getJSON(dashboardViewModel.hourlyUrl(), function (data) {
                var hourly = [];
                var hourlyEle = [];
                var hourlyGas = [];
                var hourlyCats = [];
                $.each(data, function (index, value) {
                    hourly.push(new HourlyUsageLine(value.Hour, value.ETotal, value.Gas));
                    hourlyEle.push(value.ETotal);
                    hourlyGas.push(value.Gas);
                    hourlyCats.push(value.Hour);
                });

                dashboardViewModel.hourlyUsage().setUsages(hourly);
                hourlyChart.series[0].setData(hourlyEle);
                hourlyChart.series[1].setData(hourlyGas);
                hourlyChart.xAxis[0].setCategories(hourlyCats);
            });
        }
        
        function setChartData(usagedata, chart) {
            var ele = [];
            var eleRef = [];
            var gas = [];
            var gasRef = [];
            var cats = [];

            $.each(usagedata, function (index, value) {
                ele.push(value.eTotal());
                eleRef.push(value.eReference());
                gas.push(value.gas());
                gasRef.push(value.gasReference());
                cats.push(value.identifier());
            });

            chart.series[0].setData(ele);
            chart.series[1].setData(gas);
            chart.series[2].setData(eleRef);
            chart.series[3].setData(gasRef);
            chart.xAxis[0].setCategories(cats);
        }

        function loadDailyData() {
            $.getJSON(dashboardViewModel.dailyUrl(), function (data) {
                var daily = [];

                $.each(data, function (index, value) {
                    daily.push(new UsageLine(value.DayString, value.ETotal, value.EleRef, value.EleRefDiff, value.EleRefPerc, value.Gas, value.GasRef, value.GasRefDiff, value.GasRefPerc));
                });

                dashboardViewModel.dailyUsage().usages(daily);
                setChartData(daily, dailyChart);
            });
        }
        
        function loadWeeklyData() {
            $.getJSON(dashboardViewModel.weeklyUrl(), function (data) {
                var weekly = [];
                
                $.each(data, function (index, value) {
                    weekly.push(new UsageLine(value.Week, value.ETotal, value.EleRef, value.EleRefDiff, value.EleRefPerc, value.Gas, value.GasRef, value.GasRefDiff, value.GasRefPerc));
                });

                dashboardViewModel.weeklyUsage().usages(weekly);
                setChartData(weekly, weeklyChart);
            });
        }

        function loadMonthlyData() {
            $.getJSON(dashboardViewModel.monthlyUrl(), function (data) {
                var monthly = [];
                $.each(data, function (index, value) {
                    monthly.push(new UsageLine(value.Month, value.ETotal, value.EleRef, value.EleRefDiff, value.EleRefPerc, value.Gas, value.GasRef, value.GasRefDiff, value.GasRefPerc));
                });

                dashboardViewModel.monthlyUsage().usages(monthly);
                setChartData(monthly, monthlyChart);
            });
        }
        
        function createUsagePlusRefChart(container, title) {
            var chart = new Highcharts.Chart({
                chart: {
                    renderTo: container
                },
                title: {
                    text: title
                },
                yAxis: [{
                    title: {
                        text: 'Electricity (kWh)'
                    }
                },
                    {
                        linkedTo: 0,
                        opposite: true,
                        title: {
                            text: 'Gas (m3)'
                    }
                }],
                series: [{
                    type: 'column',
                    name: 'Elektricity',
                    data: [0]
                }, {
                    type: 'column',
                    name: 'Gas',
                    data: [0]
                }, {
                    type: 'line',
                    name: 'Elektricity reference',
                    data: [0]
                }, {
                    type: 'line',
                    name: 'Gas reference',
                    data: [0]
                }]
            });

            return chart;
        }

        var dashboardViewModel = {};

        var hourlyChart, dailyChart, weeklyChart, monthlyChart;

        $(document).ready(function () {
            hourlyChart = new Highcharts.Chart({
                chart: {
                    renderTo: 'hourlychart',
                    type: 'column'
                },
                title: {
                    text: 'Hourly usage'
                },
                yAxis: [{
                    title: {
                        text: 'Electricity (kWh)'
                    }
                },
                    {
                        linkedTo: 0,
                        opposite: true,
                        title: {
                            text: 'Gas (m3)'
                        }
                    }],
                series: [{
                    name: 'Elektricity',
                    data: [0]
                }, {
                    name: 'Gas',
                    data: [0]
                }]
            });

            dailyChart = createUsagePlusRefChart('dailychart', 'Daily usage');
            weeklyChart = createUsagePlusRefChart('weeklychart', 'Weekly usage');
            monthlyChart = createUsagePlusRefChart('monthlychart', 'Monthly usage');

            dashboardViewModel = new DashboardViewModel($("input[name='apikey']").val(), $("input[name='currentWeek']").val());

            dashboardViewModel.hourlyUrl.subscribe(function (newValue) {
                loadHourlyData();
            });
            dashboardViewModel.dailyUrl.subscribe(function (newValue) {
                loadDailyData();
            });
            dashboardViewModel.weeklyUrl.subscribe(function (newValue) {
                loadWeeklyData();
            });
            dashboardViewModel.monthlyUrl.subscribe(function (newValue) {
                loadMonthlyData();
            });

            loadHourlyData();
            loadDailyData();
            loadWeeklyData();
            loadMonthlyData();

            ko.applyBindings(dashboardViewModel);
        });
    </script>
</body>
</html>
