@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Netduino P1 logging Dashboard</title>
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/Scripts/knockout-2.1.0.js")    
    @Scripts.Render("~/Content/highcharts/highcharts.js")
</head>
<body>
    @Html.Hidden("apikey", ViewData["ApiKey"])

    <div id="hourly">
        <h2>Per hour, <span data-bind="text: hourlyDate"></span></h2>
        <div id="hourlychart"></div>
        <div id="hourlytable">
            <table>
                <thead>
                    <tr>
                        <td>Hour</td>
                        <td>Electricity</td>
                        <td>Gas</td>                        
                    </tr>
                </thead>
                <tbody data-bind="foreach: hourlyUsages">
                    <tr>
                        <td><span data-bind="text: hour"></span></td>
                        <td><span data-bind="text: eTotal"></span></td>
                        <td><span data-bind="text: gas"></span></td>
                    </tr>
                </tbody>
            </table>
        </div>
        <input type="button" onclick="dashboardViewModel.hourlyPrevious();" value="Previous" />
        <input type="button" onclick="dashboardViewModel.hourlyNext();" value="Next" />
    </div>
    <div id="daily">
        <div id="dailychart"></div>
        <div id="dailytable"></div>
    </div>
    <div id="weeky">
        <div id="weeklychart"></div>
        <div id="weeklytable"></div>
    </div>
    <div id="monthly">
        <div id="monthlychart"></div>
        <div id="monthlytable"></div>
    </div>

    <script type="text/javascript">
        function HourlyUsage(hour, eTotal, gas) {
            var self = this;
            
            self.hour = ko.observable(hour);
            self.eTotal = ko.observable(eTotal);
            self.gas = ko.observable(gas);
        }

        function DashboardViewModel(apiKey) {
            var self = this;
            self.apiKey = ko.observable(apiKey);
            self.hourlyOffset = ko.observable(0);
            self.dailyOffset = ko.observable(0);
            self.weeklyOffset = ko.observable(0);
            self.weeklyStep = ko.observable(5);
            self.monthlyOffset = ko.observable(0);

            self.hourlyDate = ko.computed(function () {
                var date = new Date();
                date.setDate(date.getDate() - self.hourlyOffset());
                return date.toDateString();
            });

            self.hourlyUsages = ko.observableArray([new HourlyUsage(0, 0, 0)]);

            self.hourlyUrl = ko.computed(function () {
                return "/api/usages/" + self.apiKey() + "/hourly/" + self.hourlyOffset();
            });
            self.dailyUrl = ko.computed(function () {
                return "/api/usages/" + self.apiKey() + "/daily/" + self.dailyOffset();
            });
            self.weeklyUrl = ko.computed(function () {
                return "/api/usages/" + self.apiKey() + "/weekly/" + self.weeklyOffset() + "/" + self.weeklyStep();
            });
            self.monthlyUrl = ko.computed(function () {
                return "/api/usages/" + self.apiKey() + "/monthly/" + self.monthlyOffset();
            });

            self.hourlyNext = function () {
                if (this.hourlyOffset() == 0)
                    return;

                this.hourlyOffset(this.hourlyOffset() - 1);
            };
            self.hourlyPrevious = function () {
                this.hourlyOffset(this.hourlyOffset() + 1);
            };
            self.dailyNext = function () {
                if (this.dailyOffset() == 0)
                    return;

                this.dailyOffset(this.dailyOffset() - 1);
            };
            self.dailyPrevious = function () {
                this.dailyOffset(this.dailyOffset() + 1);
            };
            self.weeklyNext = function () {
                if (this.weeklyOffset() == 0)
                    return;

                this.weeklyOffset(this.weeklyOffset() - 1);
            };
            self.weeklyPrevious = function () {
                this.weeklyOffset(this.weeklyOffset() + 1);
            };
            self.monthlyNext = function () {
                if (this.monthlyOffset() == 0)
                    return;

                this.monthlyOffset(this.monthlyOffset() - 1);
            };
            self.monthlyPrevious = function () {
                this.monthlyOffset(this.monthlyOffset() + 1);
            };
        }

        var dashboardViewModel = {};

        function loadHourlyData() {
            $.getJSON(dashboardViewModel.hourlyUrl(), function (data) {
                var hourly = [];
                $.each(data, function (index, value) {
                    hourly.push(new HourlyUsage(value.Hour, value.ETotal, value.Gas));
                });

                dashboardViewModel.hourlyUsages(hourly);
            });
        }

        $(document).ready(function () {
            dashboardViewModel = new DashboardViewModel($("input[name='apikey']").val());

            dashboardViewModel.hourlyUrl.subscribe(function (newValue) {
                loadHourlyData();
            });

            loadHourlyData();

            ko.applyBindings(dashboardViewModel);
        });
    </script>
</body>
</html>
